<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="never" />
    <meta property="og:description" content="display: contents&amp;#160;是一个比较陌生的属性，虽然属于 display 这个基本上是最常见的 CSS 属性，但是&amp;#160;contents&amp;#160;这个取值基本不会用到。但是" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>巧用 display: contents 增强页面语义 - ChokCoco - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.ico?v=20200522" type="image/x-icon" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=KCO3_f2W_TC__-jZ7phSnmoFkQuWMJH2yAgA16eE3eY" />
    
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/coco1s/custom.css?v=5whd3TYg/tQ4PSJfOm3Q4omeR/M=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/thinkinside/bundle-thinkinside-mobile.min.css?v=-99kdknJAJsoRA0UeBwKu6WHa3LvEP4487GKBNHpHoI" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/coco1s/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/coco1s/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/coco1s/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=6bwfCY2e02dLOXNW99G2BHZkYFmw9QyYTWeJ-W-sudo"></script>
    <script>
        var currentBlogId = 177636;
        var currentBlogApp = 'coco1s';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var skinName = 'ThinkInside';
    </script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;v=20200504"></script>
    
</head>
<body>
    <a name="top"></a>
    <div id="page_begin_html">
        <script>loadPageBeginHtml();</script>
    </div>
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/coco1s/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/coco1s/">ChokCoco</a>
</h1>
<h2>
经不住流年似水, 逃不过此间少年
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/coco1s/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/ChokCoco">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/coco1s/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
106&nbsp; </span>
<span id="stats_article_count">文章 - 
3&nbsp; </span>
<span id="stats-comment_count">评论 - 
1798</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/coco1s/p/12980682.html">巧用 display: contents 增强页面语义</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <p><span style="font-size: 14px; font-family: verdana, geneva;"><code>display: contents</code>&nbsp;是一个比较陌生的属性，虽然属于 display 这个基本上是最常见的 CSS 属性，但是&nbsp;<code>contents</code>&nbsp;这个取值基本不会用到。但是它早在 2016 年就已经得到了 Firefox 的支持。</span></p>
<p><span style="font-size: 14px; font-family: verdana, geneva;">本文将深入一下这个有意思的属性值。</span></p>
<h2 class="heading"><span style="font-size: 18pt; font-family: verdana, geneva;">基本用法</span></h2>
<p><span style="font-size: 14px; font-family: verdana, geneva;">根据&nbsp;<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display" target="_blank">W3C</a>&nbsp;对&nbsp;<code>display: contents</code>&nbsp;的定义。</span></p>
<blockquote>
<p><span style="font-size: 14px; font-family: verdana, geneva;">The element itself does not generate any boxes, but its children and pseudo-elements still generate boxes and text runs as normal. For the purposes of box generation and layout, the element must be treated as if it had been replaced in the element tree by its contents (including both its source-document children and its pseudo-elements, such as ::before and ::after pseudo-elements, which are generated before/after the element&rsquo;s children as normal).</span></p>
</blockquote>
<p><span style="font-size: 14px; font-family: verdana, geneva;">简单翻译一下即是，将设置了该属性值的元素本身将不会产生任何盒子，但是它的从保留其子代元素的正常展示。</span></p>
<p><span style="font-size: 14px; font-family: verdana, geneva;">看个简单的例子。有如下简单三层结构：</span></p>
<div class="cnblogs_Highlighter">
<pre class="brush:html;gutter:true;">&lt;div class="container"&gt;
    &lt;div class="wrap"&gt;
        &lt;div class="inner"&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</pre>
</div>
<p><span style="font-family: verdana, geneva;">简单的 CSS 如下：</span></p>
<div class="cnblogs_Highlighter">
<pre class="brush:css;gutter:true;">.container {
    width: 200px;
    height: 200px;
    background: #bbb;
}

.wrap {
    border: 2px solid red;
    padding: 20px;
    box-sizing: border-box;
}

.inner {
    border: 2px solid green;
    padding: 20px;
    box-sizing: border-box;
}</pre>
</div>
<p><span style="font-size: 14px; font-family: verdana, geneva;">表现如下：</span></p>
<p><span style="font-size: 14px; font-family: verdana, geneva;"><img src="https://user-gold-cdn.xitu.io/2020/5/28/17259f188da48a4b?w=206&amp;h=210&amp;f=png&amp;s=1896" alt="image" width="157" height="160"></span></p>
<p><span style="font-size: 14px; font-family: verdana, geneva;">这个非常好理解，但是如果，我们给中间层的容器添加上&nbsp;<code>display: contents</code>，再看看效果：</span></p>
<div class="cnblogs_Highlighter">
<pre class="brush:html;gutter:true;">&lt;div class="container"&gt;
    &lt;div class="wrap" style="display: contents"&gt;
        &lt;div class="inner"&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;<span style="font-family: verdana, geneva;">&nbsp;</span></pre>
</div>
<p><span style="font-size: 14px; font-family: verdana, geneva;"><img src="https://user-gold-cdn.xitu.io/2020/5/28/17259f1c0e66a213?w=206&amp;h=219&amp;f=png&amp;s=2269" alt="image" width="158" height="168"></span></p>
<p><span style="font-size: 14px; font-family: verdana, geneva;">可以看到，没有了中间层的&nbsp;<code>border: 2px solid red</code>&nbsp;的红色边框，整个&nbsp;<code>.wrap</code>&nbsp;div 好像不存在一样，但是它的子元素却是正常的渲染了。</span></p>
<p><span style="font-size: 14px; font-family: verdana, geneva;">重点，设置了<code>display: contents</code>的元素本身不会被渲染，但是其子元素能够正常被渲染。</span></p>
<p><span style="font-size: 14px; font-family: verdana, geneva;">这个属性我一直在思考有什么非常适合的使用点。</span></p>
<p><span style="font-size: 14px; font-family: verdana, geneva;">总结来说，这个属性适用于那些充当遮罩（wrapper）的元素，这些元素本身没有什么作用，可以被忽略的一些布局场景。</span></p>
<p><span style="font-size: 12px; font-family: verdana, geneva;">&nbsp;</span></p>
<h2 class="heading"><span style="font-size: 18pt; font-family: verdana, geneva;">充当无语义的包裹框</span></h2>
<p><span style="font-size: 14px; font-family: verdana, geneva;">最近写 React、Vue 的时候，发现这个属性在写 JSX 的时候能有很好的作用，并且也非常符合这个属性本身的定位。</span></p>
<p><span style="font-size: 14px; font-family: verdana, geneva;">我们在写 React、RN 时，经常需要输出一段模板。</span></p>
<div class="cnblogs_Highlighter">
<pre class="brush:javascript;gutter:true;">return (
    &lt;div class="wrap"&gt;
        &lt;h2&gt;Title&lt;/h2&gt;
        &lt;div&gt;...&lt;/div&gt;
    &lt;/div&gt;
)</pre>
</div>
<div>
<div>
<p><span style="font-size: 14px; font-family: verdana, geneva;">我们只是想输出 <code>.wrap</code> div 内的内容，但是由于框架要求，输出的 JSX 模板必须包含在一个父元素之下，所以不得已，需要添加一个 <code>.wrap</code> 进行包裹，但是这个 <code>.wrap</code> 本身是没有任何样式的。</span></p>
<p><span style="font-size: 14px; font-family: verdana, geneva;">如果输出的元素是要放在其他 <code>display: flex</code>、<code>display: grid</code> 容器之下，加了一层无意义的 <code>.wrap</code> 之后，整个布局又需要重新进行调整，麻烦。</span></p>
<p><span style="font-size: 14px; font-family: verdana, geneva;">一种方法是使用框架提供的容器 <code>&lt;React.Fragment&gt;</code>，它不会向页面插入任何多余节点。</span></p>
<blockquote>
<p><span style="font-size: 14px; font-family: verdana, geneva;">在 Vue 中类似的是 <code>&lt;template&gt;</code> 元素， <code>&lt;template&gt;</code> 也是不会被渲染在 DOM 树中，查看页面结构也无法看到，但是 <code>display: contents</code> 是存在于页面结构中的，只是没有生成任何盒子。</span></p>
</blockquote>
<p><span style="font-size: 14px; font-family: verdana, geneva;">这个多出来的父元素其实是没必要的。这个时候，我们也可以添加上 <code>display: contents</code>，像是这样：</span></p>
</div>
</div>
<div class="cnblogs_Highlighter">
<pre class="brush:javascript;gutter:true;">return (
    &lt;div class="wrap" style="display: contents"&gt;
        &lt;h2&gt;Title&lt;/h2&gt;
        &lt;div&gt;...&lt;/div&gt;
    &lt;/div&gt;
)</pre>
</div>
<p><span style="font-size: 14px; font-family: verdana, geneva;">这样，它既起到了包裹的作用，但是在实际渲染中，这个 div 其实没有生成任何盒子，一举两得。并且像一些&nbsp;<code>flex</code>&nbsp;布局、<code>grid</code>&nbsp;布局，也不会受到影响。</span></p>
<p><span style="font-size: 14px; font-family: verdana, geneva;"><a href="https://codepen.io/Chokcoco/pen/wvKLBVV" target="_blank">Codepen Demo -- display: contents | display: flex 的穿透影响</a></span></p>
<p class="heading"><span style="font-size: 12px; font-family: verdana, geneva;">&nbsp;</span></p>
<h2 class="heading"><span style="font-size: 18pt; font-family: verdana, geneva;">让代码更加符合语义化</span></h2>
<p><span style="font-size: 14px; font-family: verdana, geneva;">考虑这个非常实际的场景，现在我们的页面上充斥了大量的可点击按钮，或者点击触发相应功能的文字等元素。但是，从语义上而言，它们应该是一个一个的&nbsp;<code>&lt;button&gt;</code>，但是实际上，更多时候我们都是使用了&nbsp;<code>&lt;p&gt;、&lt;div&gt;、&lt;a&gt;</code>&nbsp;等标签进行了模拟，给他们加上了相应的点击事情而已。</span></p>
<p><span style="font-size: 14px; font-family: verdana, geneva;">像是下面这样，虽然没什么问题，但是相对而言不那么符合语义化：</span></p>
<div class="cnblogs_Highlighter">
<pre class="brush:html;gutter:true;">&lt;p class="button"&gt;
    Button
&lt;/p&gt;
&lt;p class="button"&gt;
    Click Me
&lt;/p&gt;</pre>
</div>
<div class="cnblogs_Highlighter">
<pre class="brush:css;gutter:true;">.button {
    width: 120px;
    line-height: 64px;
    text-align: center;
    background-color: #ddd;
    border: 2px solid #666;
}</pre>
</div>
<p><span style="font-family: verdana, geneva;">&nbsp;</span><span style="font-size: 14px; font-family: verdana, geneva;"><img src="https://user-gold-cdn.xitu.io/2020/5/28/17259f3cc84d7769?w=136&amp;h=154&amp;f=png&amp;s=2516" alt=""></span></p>
<p><span style="font-size: 14px; font-family: verdana, geneva;">我们不使用&nbsp;<code>&lt;button&gt;</code>&nbsp;的原因有很多，<code>&lt;button&gt;</code>&nbsp;相对 div 而言没那么好控制，且会引入很多默认样式。但是，有了&nbsp;<code>display: contents</code>，我们可以让我们的代码既符合语义化，同时不需要去解决&nbsp;<code>&lt;button&gt;</code>&nbsp;带来的一些样式问题：</span></p>
<div class="cnblogs_Highlighter">
<pre class="brush:html;gutter:true;">&lt;p class="button"&gt;
    &lt;button style="display: contents"&gt;
        Button
    &lt;/button&gt;
&lt;/p&gt;
&lt;p class="button"&gt;
    &lt;button style="display: contents"&gt;
        Click Me
    &lt;/button&gt;
&lt;/p&gt;</pre>
</div>
<p><span style="font-size: 14px; font-family: verdana, geneva;">添加了&nbsp;<code>&lt;button style="display: contents"&gt;Click Me&lt;/button&gt;</code>&nbsp;的包裹，不会对样式带来什么影响，button 也不会实际渲染在页面结构中，但是页面的结构语义上好了不少。</span></p>
<p><span style="font-size: 14px; font-family: verdana, geneva;"><a href="https://codepen.io/Chokcoco/pen/oNjRePd" target="_blank">CodePen Demo -- Button with display: contents</a></span></p>
<p><span style="font-size: 14px; font-family: verdana, geneva;">对于对页面结构、语义化有强迫症的一些同学而言，灵活运用这个属性可以解决很多问题。</span></p>
<p><span style="font-size: 12px; font-family: verdana, geneva;">&nbsp;&nbsp;</span></p>
<h2 class="heading"><span style="font-size: 18pt; font-family: verdana, geneva;">在替换元素及表单元素中一些有意思的现象</span></h2>
<p><span style="font-size: 14px; font-family: verdana, geneva;"><code>display: contents</code>&nbsp;并非在所有元素下的表现都一致。</span></p>
<p><span style="font-size: 14px; font-family: verdana, geneva;">对于可替换元素及大部分表单元素，使用&nbsp;<code>display: contents</code>&nbsp;的作用类似于&nbsp;<code>display: none</code>。</span></p>
<p><span style="font-size: 14px; font-family: verdana, geneva;">也就是说对于一些常见的可替换元素、表单元素：</span></p>
<ul>
<li><span style="font-size: 14px; font-family: verdana, geneva;"><code>&lt;br&gt;</code></span></li>
<li><span style="font-size: 14px; font-family: verdana, geneva;"><code>&lt;canvas&gt;</code></span></li>
<li><span style="font-size: 14px; font-family: verdana, geneva;"><code>&lt;object&gt;</code></span></li>
<li><span style="font-size: 14px; font-family: verdana, geneva;"><code>&lt;audio&gt;</code></span></li>
<li><span style="font-size: 14px; font-family: verdana, geneva;"><code>&lt;iframe&gt;</code></span></li>
<li><span style="font-size: 14px; font-family: verdana, geneva;"><code>&lt;img&gt;</code></span></li>
<li><span style="font-size: 14px; font-family: verdana, geneva;"><code>&lt;video&gt;</code></span></li>
<li><span style="font-size: 14px; font-family: verdana, geneva;"><code>&lt;frame&gt;</code></span></li>
<li><span style="font-size: 14px; font-family: verdana, geneva;"><code>&lt;input&gt;</code></span></li>
<li><span style="font-size: 14px; font-family: verdana, geneva;"><code>&lt;textarea&gt;</code></span></li>
<li><span style="font-size: 14px; font-family: verdana, geneva;"><code>&lt;select&gt;</code></span></li>
</ul>
<p><span style="font-size: 14px; font-family: verdana, geneva;">作用了&nbsp;<code>display: contents</code>&nbsp;相当于使用了&nbsp;<code>display: none</code>&nbsp;，元素的整个框和内容都没有绘制在页面上。</span></p>
<h3 class="heading"><span style="font-size: 14pt; font-family: verdana, geneva;"><code>&lt;button&gt;</code>&nbsp;的一些异同</span></h3>
<p><span style="font-size: 14px; font-family: verdana, geneva;">与其他表单元素不一样，正常而言，添加了&nbsp;<code>display: contents</code>&nbsp;相当于被隐藏，不会被渲染。但是实际运用过程中发现，<code>&lt;button&gt;&lt;/button&gt;</code>&nbsp;如果包裹了内容，其一些可继承样式还是会被子内容继承。这个实际使用的过程中需要注意一下。</span></p>
<p><span style="font-size: 12px; font-family: verdana, geneva;">&nbsp;</span></p>
<h2 class="heading"><span style="font-size: 18pt; font-family: verdana, geneva;">对 A11Y 的影响</span></h2>
<p><span style="font-size: 14px; font-family: verdana, geneva;">在一些外文文档中有一些讨论是关于&nbsp;<code>display: contents</code>&nbsp;的使用会影响到页面的可访问性。例如作用了&nbsp;<code>display: contents</code>&nbsp;的容器及列表，会对页面的可访问性带来一些意外结果。</span></p>
<ul>
<li><span style="font-size: 14px; font-family: verdana, geneva;"><a href="https://github.com/w3c/csswg-drafts/issues/3040" target="_blank">[css-a11y][css-display] display: contents; strips semantic role from elements</a></span></li>
</ul>
<p><span style="font-size: 14px; font-family: verdana, geneva;">这个我看暂时没有明确的结论，如果你的页面对可访问性的要求很高，具体使用的此属性的话也是需要注意一下这一点。</span></p>
<p><span style="font-size: 12px; font-family: verdana, geneva;">&nbsp;</span></p>
<h2 class="heading"><span style="font-size: 18pt; font-family: verdana, geneva;">CSS 中类似的一些影响布局的属性</span></h2>
<p><span style="font-size: 14px; font-family: verdana, geneva;">CSS 本身其实也在一直在努力，增加了各种属性去让我们在布局上有更多的空间与控制权。总而言之给我的感受是让 CSS 更加的像是一个完整的工程而不仅仅只是展现样式。</span></p>
<p><span style="font-size: 14px; font-family: verdana, geneva;">类似的一些有意思的属性：</span></p>
<ul>
<li><span style="font-size: 14px; font-family: verdana, geneva;"><a href="https://github.com/chokcoco/iCSS/issues/23" target="_blank">CSS新特性contain，控制页面的重绘与重排</a></span></li>
</ul>
<p><span style="font-size: 12px; font-family: verdana, geneva;">&nbsp;</span></p>
<h2 class="heading"><span style="font-size: 18pt; font-family: verdana, geneva;">CAN I USE</span></h2>
<p><span style="font-size: 14px; font-family: verdana, geneva;">看看<a href="https://caniuse.com/#search=display%3A%20contents" target="_blank">兼容性</a>。</span></p>
<p><span style="font-family: verdana, geneva;">&nbsp;</span><span style="font-size: 14px; font-family: verdana, geneva;"><img src="https://user-gold-cdn.xitu.io/2020/5/28/17259f189098ec65?w=1265&amp;h=664&amp;f=png&amp;s=126003" alt="image" width="878" height="461"></span></p>
<p><span style="font-size: 14px; font-family: verdana, geneva;">不算太惨淡，但也不算全面普及。考虑用在一些渐进增强的场景当中。</span></p>
<p><span style="font-size: 12px; font-family: verdana, geneva;">&nbsp;</span></p>
<h2 class="heading"><span style="font-size: 18pt; font-family: verdana, geneva;">参考</span></h2>
<ul>
<li><span style="font-size: 14px; font-family: verdana, geneva;"><a href="https://bitsofco.de/how-display-contents-works/" target="_blank">How display: contents; Works</a></span></li>
<li><span style="font-size: 14px; font-family: verdana, geneva;"><a href="https://www.w3cplus.com/css/display-contents-is-coming.html" target="_blank">CSS的display:contents</a></span></li>
<li><span style="font-size: 14px; font-family: verdana, geneva;"><a href="https://adrianroselli.com/2018/05/display-contents-is-not-a-css-reset.html" target="_blank">Display: Contents Is Not a CSS Reset</a></span></li>
</ul>
<h2 class="heading"><span style="font-size: 12px; font-family: verdana, geneva;">&nbsp;</span></h2>
<h2 class="heading"><span style="font-size: 18pt; font-family: verdana, geneva;">最后</span></h2>
<p><span style="font-size: 14px; font-family: verdana, geneva;">好了，本文到此结束，希望对你有帮助 :)</span></p>
<p><span style="font-size: 14px; font-family: verdana, geneva;">更多精彩 CSS 技术文章汇总在我的&nbsp;<a href="https://github.com/chokcoco/iCSS" target="_blank">Github -- iCSS</a>&nbsp;，持续更新，欢迎点个 star 订阅收藏。</span></p>
<p><span style="font-size: 14px; font-family: verdana, geneva;">更多精彩有趣的 CSS 效果，欢迎来这里看看&nbsp;<a href="https://chokcoco.github.io/CSS-Inspiration/#/./init" target="_blank">CSS 灵感 -- 在这里找到写 CSS 的灵感</a>。</span></p>
<p><span style="font-size: 14px; font-family: verdana, geneva;">如果还有什么疑问或者建议，可以多多交流，原创文章，文笔有限，才疏学浅，文中若有不正之处，万望告知。</span></p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-05-28 14:33</span>&nbsp;
<a href="https://www.cnblogs.com/coco1s/">ChokCoco</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12980682" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12980682);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 177636, cb_blogApp = 'coco1s', cb_blogUserGuid = '97b0660a-69a1-e311-8d02-90b11c0b17d6';
    var cb_entryId = 12980682, cb_entryCreatedDate = '2020-05-28 14:33', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;"></div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 ChokCoco
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    <div id="page_end_html">
        <script>
var href = location.href;

if(/https/.test(href)) {
     document.querySelectorAll('iframe').forEach(val => { 
	val.src = 'https:' + val.src.split(':')[1];
    });
}

var l = document.createElement('link');
l.rel = "shortcut icon";
l.href = "http://images.cnblogs.com/cnblogs_com/coco1s/965277/o_favicon.png";
document.getElementsByTagName("head")[0].appendChild(l);

</script>
<div id="rocket"></div>
<script>
var cnzz_protocol = (("https:" == document.location.protocol) ? "https://" : "http://");document.write(unescape("%3Cspan id='cnzz_stat_icon_1259286380'%3E%3C/span%3E%3Cscript src='" + cnzz_protocol + "s4.cnzz.com/z_stat.php%3Fid%3D1259286380%26online%3D1%26show%3Dline' type='text/javascript'%3E%3C/script%3E"));
</script>
<script>
var i = 0,
	deIframe = setInterval(function(){
		i++;
		$('#sideBar').find('iframe').parent().remove();
		$('#sideBar>div').not('#sideBarMain').remove();
		if(i == 10){
			clearInterval(deIframe);
		}
	}, 200);
</script>
<script>
var reward = (function(){
	function dataInsert(){
var data = '<div class="g-gongzhonghao">'
    +    '<p><strong><span style="font-size: 14px; font-family: verdana, geneva;">最后，新开通的公众号求关注，形式希望是更短的篇幅，质量更高一些的技巧类文章，包括但不局限于 CSS：</span></strong></p>'
    +    '<p><span style="font-size: 14px; font-family: verdana, geneva;"><a href="https://user-images.githubusercontent.com/8554143/54919342-6d0dfd00-4ef8-11e9-9ee8-fbae9241d89e.png" target="_blank"><img src="//images.cnblogs.com/cnblogs_com/coco1s/881614/o_20031002540054919342-6d0dfd00-4ef8-11e9-9ee8-fbae9241d89e.png" alt="image" width="180" height="144"></a></span></p>'
    + '</div>'
    + '<div class="m-reward">' 
							+ '<div class="m-desc">如果觉得文章对您有用，请随意打赏。您的支持将鼓励我继续创作！</div>'
							+ '<div class="reward-btn">打赏支持</div>'
							+ '</div>'
							+ '<div class="reward-wrap">'
							+ '<div class="reward-btn-close">+</div>'
							+ '<h2>(^_^)打个赏喝个咖啡(^_^)</h2>'
							+ '<div class="wechat">'
							+ '<img src="https://images.cnblogs.com/cnblogs_com/coco1s/881614/o_weixin.png" alt="微信支付" />'
							+ '</div>'
							+ '<div class="zhifubao">'
							+ '<img src="https://images.cnblogs.com/cnblogs_com/coco1s/881614/o_zhifubao.png" alt="支付宝支付" />'
							+ '</div>	'
							+ '</div>';

		if($('#cnblogs_post_body')){
			$('#cnblogs_post_body').append(data);		
			eventBind();
		}					
	}

	function eventBind(){
		$('.reward-btn').on('click', function(event) {
			$('.reward-wrap').fadeIn(300);
		});

		$('.reward-btn-close').on('click', function(event) {
			$('.reward-wrap').fadeOut(500);
		});
	}
	
	return{
		init:function(){
			dataInsert();
		}
	}
})();
reward.init();
</script>
<script>
/** 侧边栏回到顶部 */
var rocket = $('#rocket');

$(window).on('scroll', debounce(slideTopSet, 300));

function debounce(func, wait) {
	var timeout;
	return function() {
		clearTimeout(timeout);
		timeout = setTimeout(func, wait);
	};
};
function slideTopSet() {
	var top = $(document).scrollTop();

	if (top > 200) {
		rocket.addClass('show');
	} else {
		rocket.removeClass('show');
	}
}
$(document).on('click', '#rocket', function(event) {
	rocket.addClass('move');
	$('body, html').animate({
		scrollTop: 0
	}, 800);
});
$(document).on('animationEnd', function() {
	setTimeout(function() {
		rocket.removeClass('move');
	}, 400);

});
$(document).on('webkitAnimationEnd', function() {
	setTimeout(function() {
		rocket.removeClass('move');
	}, 400);
});
</script>
    </div>
</body>
</html>
