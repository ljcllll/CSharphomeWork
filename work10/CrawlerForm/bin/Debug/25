<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="饿汉式 // 饿汉式单例 public class Hungry { //构造器私有 private Hungry(){ } // 一上来就把这个类加载了 private final static H" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>单例模式，反射破环？ - 一条有梦想的咸鱼。 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.ico?v=20200522" type="image/x-icon" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=KCO3_f2W_TC__-jZ7phSnmoFkQuWMJH2yAgA16eE3eY" />
    <link id="MainCss" rel="stylesheet" href="/skins/en_summergarden/bundle-en_summergarden.min.css?v=eJPbnlR84uox-N8Y1kMPtN4OnGKJuv0XEEgil80ofFA" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/en_summergarden/bundle-en_summergarden-mobile.min.css?v=qqfeWJjwG2yHc4G3o4D_aAh8NdA2Uspy5vjuqwOEq0c" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/yslss/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/yslss/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/yslss/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=6bwfCY2e02dLOXNW99G2BHZkYFmw9QyYTWeJ-W-sudo"></script>
    <script>
        var currentBlogId = 590895;
        var currentBlogApp = 'yslss';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'En_summerGarden';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    <div id="page_begin_html">
        

    </div>
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a href="https://www.cnblogs.com/yslss/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="Return Home" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/yslss/">一条有梦想的咸鱼。</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		

<ul id="navList">
	<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
CnBlogs</a>
</li>
	<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/yslss/">
Home</a>
</li>
	<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
New Post</a>
</li>
	<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E4%B8%80%E6%9D%A1%E6%9C%89%E6%A2%A6%E6%83%B3%E7%9A%84%E5%92%B8%E9%B1%BC%E3%80%82">
Contact</a></li>
	<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
Admin</a>
</li>
	<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/yslss/rss/">
Subscription</a>
	
<a id="blog_nav_rss_image" href="https://www.cnblogs.com/yslss/rss/">
    <img src="/skins/en_summergarden/images/xml.gif" alt="订阅" />
</a></li>
</ul>



		<div class="blogStats">
			
			<!--done-->
Posts - 
12&nbsp;
Articles - 
0&nbsp;
Comments - 
1&nbsp;



			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
<!--done-->
<div id="topics">
	<div class="post">
		<h1 class = "postTitle">
			
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/yslss/p/12990783.html">单例模式，反射破环？</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <blockquote>
<p>饿汉式</p>
</blockquote>
<pre><code class="language-java">// 饿汉式单例
public class Hungry {
    
    //构造器私有
    private Hungry(){

    }
    // 一上来就把这个类加载了
    private final static  Hungry HUNGRY = new Hungry();

    public static Hungry getInstance(){
        return HUNGRY;
    }
}
</code></pre>
<pre><code class="language-java">// 饿汉式单例
public class Hungry {
    // 这4组数据非常耗内存资源，饿汉式一上来就把所有的内存里面的东西全部加载进来了，就存在这个空间
    // 但这个空间现在是没有使用的，可能会造成浪费空间
    private byte[] data1 = new byte[1024*1024];
    private byte[] data2 = new byte[1024*1024];
    private byte[] data3 = new byte[1024*1024];
    private byte[] data4 = new byte[1024*1024];
    
    //构造器私有
    private Hungry(){

    }
    // 一上来就把这个类加载了
    private final static  Hungry HUNGRY = new Hungry();

    public static Hungry getInstance(){
        return HUNGRY;
    }

}
</code></pre>
<p>饿汉式单例可能会造成浪费空间，所以想要用的时候再去创建这个对象，平时就先放在这个地方，于是就出现了懒汉式！</p>
<blockquote>
<p>懒汉式</p>
</blockquote>
<pre><code class="language-java">// 懒汉式单例
public class LazyMan {
	
   // 构造器私有
    private LazyMan(){
       
    }

    private  static LazyMan lazyMan;

   
    public static LazyMan getInstance(){
       
        if (lazyMan==null){
            lazyMan = new LazyMan(); 
        }
        return lazyMan;
    }
}
</code></pre>
<p>它是有问题的，单线程下确实单例ok，多线程并发就会出现问题！</p>
<p><strong>测试</strong></p>
<pre><code class="language-java">// 懒汉式单例
public class LazyMan {
	
   // 构造器私有
    private LazyMan(){
       System.out.println(Thread.currentThread().getName()+&quot;:: ok&quot;);
    }

    private  static LazyMan lazyMan;

   
    public static LazyMan getInstance(){
       
        if (lazyMan==null){
            lazyMan = new LazyMan(); 
        }
        return lazyMan;
    }
    
    public static void main(String[] args) {

        for (int i = 0; i &lt; 10; i++) {
            new Thread(() -&gt; {
                LazyMan.getInstance();
            }).start();
        }
    }
}
</code></pre>
<p><img src="https://img2020.cnblogs.com/blog/1869289/202005/1869289-20200530085229819-614760537.png" alt=""></p>
<p><img src="https://img2020.cnblogs.com/blog/1869289/202005/1869289-20200530085216861-466747495.png" alt=""></p>
<p>发现单例有问题，每次结果可能都不一样！</p>
<p><strong>解决</strong></p>
<pre><code class="language-java">// 懒汉式单例
public class LazyMan {


    private LazyMan(){
        System.out.println(Thread.currentThread().getName()+&quot;:: ok&quot;);
    }

    private  static LazyMan lazyMan;

    // 双重检测锁模式的 懒汉式单例 DCL懒汉式
    public static LazyMan getInstance(){
        if (lazyMan==null){
            synchronized (LazyMan.class){
                if (lazyMan==null){
                    lazyMan = new LazyMan(); 
                }
            }
        }
        return lazyMan;
    }

     public static void main(String[] args) {

         for (int i = 0; i &lt; 10 ; i++) {
             new Thread(()-&gt;{
                LazyMan.getInstance();
             }).start();
         }
     }
}
</code></pre>
<p><img src="https://img2020.cnblogs.com/blog/1869289/202005/1869289-20200530085200698-203464594.png" alt=""></p>
<p>但在极端情况下还是可能出现问题</p>
<p><img src="https://img2020.cnblogs.com/blog/1869289/202005/1869289-20200530085141489-348383799.png" alt=""></p>
<p>经历三个步骤：</p>
<p>1、 分配内存空间</p>
<p>2、 执行构造方法，初始化对象</p>
<p>3、 把这个对象指向这个空间</p>
<p><strong>有可能会发生指令重排的操作！</strong></p>
<p>比如，期望它执行 123 ，但是它真实可能执行132，比如第一个A线程过来执行了132，先分配空间再吧这个空间占用了，占用之后再去执行构造方法，如果现在突然来了个B线程，由于A已经指向这个空间了，它会以为这个 lazyMan 不等于 null ，直接return ，此时lazyMan还没有完成构造，所有必须避免这个问题！</p>
<p>必须加上<code>volatile</code></p>
<pre><code class="language-java">// 懒汉式单例
public class LazyMan {


    private LazyMan(){
        System.out.println(Thread.currentThread().getName()+&quot;:: ok&quot;);
    }
	// 避免指令重排
    private volatile static LazyMan lazyMan;

    // 双重检测锁模式的 懒汉式单例 DCL懒汉式
    public static LazyMan getInstance(){
        if (lazyMan==null){
            synchronized (LazyMan.class){
                if (lazyMan==null){
                    lazyMan = new LazyMan(); 
                }
            }
        }
        return lazyMan;
    }

     public static void main(String[] args) {

         for (int i = 0; i &lt; 10 ; i++) {
             new Thread(()-&gt;{
                LazyMan.getInstance();
             }).start();
         }
     }
}
</code></pre>
<blockquote>
<p>静态内部类</p>
</blockquote>
<pre><code class="language-java">// 静态内部类
public class Holder {
    private Holder(){

    }
    public static Holder getInstance(){
        return InnerClass.HOLDER;
    }
    public static  class InnerClass{
        private static final Holder HOLDER = new Holder();
    }
}
</code></pre>
<p>也是单例模式的一种，不安全！</p>
<blockquote>
<p>单例不安全 	反射</p>
</blockquote>
<pre><code class="language-java">// 懒汉式单例
public class LazyMan {


    private LazyMan(){
        System.out.println(Thread.currentThread().getName()+&quot;:: ok&quot;);
    }

    private volatile static LazyMan lazyMan;

    // 双重检测锁模式的 懒汉式单例 DCL懒汉式
    public static LazyMan getInstance(){
        if (lazyMan==null){
            synchronized (LazyMan.class){
                if (lazyMan==null){
                    lazyMan = new LazyMan(); //不是一个原子性操作
                }
            }
        }
        return lazyMan;
    }


    //反射
     public static void main(String[] args) throws Exception {
         LazyMan instance1 = LazyMan.getInstance();
         Constructor&lt;LazyMan&gt; declaredConstructor = LazyMan.class.getDeclaredConstructor(null);
         declaredConstructor.setAccessible(true); // 无视了私有的构造器
         // 通过反射创建对象
         LazyMan instance2 = declaredConstructor.newInstance();

         System.out.println(instance1);
         System.out.println(instance2);
     }
}
</code></pre>
<p><img src="https://img2020.cnblogs.com/blog/1869289/202005/1869289-20200530085115451-983189446.png" alt=""></p>
<p>结论：反射可以破坏这种单例</p>
<p><strong>解决</strong></p>
<pre><code class="language-java">// 懒汉式单例
public class LazyMan {

    private LazyMan(){
        synchronized (LazyMan.class){
            if (lazyMan!=null){
                throw new RuntimeException(&quot;不要试图使用反射破环 异常&quot;);
            }
        }
        System.out.println(Thread.currentThread().getName()+&quot;:: ok&quot;);
    }

    private volatile static LazyMan lazyMan;

    // 双重检测锁模式的 懒汉式单例 DCL懒汉式
    public static LazyMan getInstance(){
        if (lazyMan==null){
            synchronized (LazyMan.class){
                if (lazyMan==null){
                    lazyMan = new LazyMan(); //不是一个原子性操作
                }
            }
        }
        return lazyMan;
    }

    //反射
     public static void main(String[] args) throws Exception {
         LazyMan instance1 = LazyMan.getInstance();
         Constructor&lt;LazyMan&gt; declaredConstructor = LazyMan.class.getDeclaredConstructor(null);
         declaredConstructor.setAccessible(true); // 无视了私有的构造器
         // 通过反射创建对象
         LazyMan instance2 = declaredConstructor.newInstance();

         System.out.println(instance1);
         System.out.println(instance2);
     }
}
</code></pre>
<p><img src="https://img2020.cnblogs.com/blog/1869289/202005/1869289-20200530085051712-1140711830.png" alt=""></p>
<p>但是如果都用反射创建对象的情况下，还是会破环单例！</p>
<p><strong>测试</strong></p>
<p><img src="https://img2020.cnblogs.com/blog/1869289/202005/1869289-20200530085022776-883662583.png" alt=""></p>
<p><strong>解决</strong></p>
<pre><code class="language-java">// 懒汉式单例
public class LazyMan {
      // 标志位
    private static boolean abc = false;

    private LazyMan(){
        synchronized (LazyMan.class){
            if (abc==false){
                abc=true;
            }else {
                throw new RuntimeException(&quot;不要试图使用反射破环 异常&quot;);
            }
          
        }
        System.out.println(Thread.currentThread().getName()+&quot;:: ok&quot;);
    }
    private volatile static LazyMan lazyMan;

    // 双重检测锁模式的 懒汉式单例 DCL懒汉式
    public static LazyMan getInstance(){
        if (lazyMan==null){
            synchronized (LazyMan.class){
                if (lazyMan==null){
                    lazyMan = new LazyMan(); //不是一个原子性操作
                }
            }
        }
        return lazyMan;
    }

    //反射
    public static void main(String[] args) throws Exception {
        //LazyMan instance1 = LazyMan.getInstance();
        Constructor&lt;LazyMan&gt; declaredConstructor = LazyMan.class.getDeclaredConstructor(null);
        declaredConstructor.setAccessible(true); // 无视了私有的构造器
        // 通过反射创建对象
        LazyMan instance2 = declaredConstructor.newInstance();
        LazyMan instance1 = declaredConstructor.newInstance();

        System.out.println(instance1);
        System.out.println(instance2);
    }
}
</code></pre>
<p><img src="https://img2020.cnblogs.com/blog/1869289/202005/1869289-20200530085004471-1299363875.png" alt=""></p>
<p>但是如果被人知道 <code>abc</code>这个变量，也可以破环！</p>
<p><img src="https://img2020.cnblogs.com/blog/1869289/202005/1869289-20200530084949083-762775567.png" alt=""></p>
<p><mark>单例又被破环了！</mark></p>
<p>看一下源码</p>
<p><img src="https://img2020.cnblogs.com/blog/1869289/202005/1869289-20200530084934727-1890738756.png" alt=""></p>
<p>它说不能使用反射破环枚举，枚举是jdk1.5出现的，自带单例模式！</p>
<p><strong>测试</strong>，写一个枚举类</p>
<pre><code class="language-java">// enum 本身就是一个class类
public enum EnumSingle {

    INSTANCE;
    public EnumSingle getInstance(){
        return INSTANCE;
    }
}
</code></pre>
<p>查看它的源码</p>
<p><img src="https://img2020.cnblogs.com/blog/1869289/202005/1869289-20200530084906146-1966744325.png" alt=""></p>
<p>试图破环！</p>
<pre><code class="language-java">// enum 本身就是一个class类
public enum EnumSingle {

    INSTANCE;
    public EnumSingle getInstance(){
        return INSTANCE;
    }
}
class Test{
    public static void main(String[] args) throws Exception {
        EnumSingle instance1 = EnumSingle.INSTANCE;
        Constructor&lt;EnumSingle&gt; declaredConstructor = EnumSingle.class.getDeclaredConstructor(null);
        declaredConstructor.setAccessible(true);
        EnumSingle instance2 = declaredConstructor.newInstance();
        System.out.println(instance1);
        System.out.println(instance2);
    }
}
</code></pre>
<p><img src="https://img2020.cnblogs.com/blog/1869289/202005/1869289-20200530084842906-1366055976.png" alt=""></p>
<p>它竟然说我现在的这个枚举类中没有空参构造器！</p>
<p>然后就去源码里分析！</p>
<p><img src="https://img2020.cnblogs.com/blog/1869289/202005/1869289-20200530084830441-2061828793.png" alt=""></p>
<p>找到这个class文件！利用javap反编译一下！</p>
<p><img src="https://img2020.cnblogs.com/blog/1869289/202005/1869289-20200530084816237-568885889.png" alt=""></p>
<p>发现这个也显示有一个空参构造，证明这个也不对，用第三方的工具查看！</p>
<p><img src="https://img2020.cnblogs.com/blog/1869289/202005/1869289-20200530084759223-356213598.png" alt=""></p>
<p>利用它再吧class文件生成java文件！</p>
<p><img src="https://img2020.cnblogs.com/blog/1869289/202005/1869289-20200530084739520-1898020039.png" alt=""></p>
<p><img src="https://img2020.cnblogs.com/blog/1869289/202005/1869289-20200530084730518-806779912.png" alt=""></p>
<p>打开这个java文件</p>
<p><img src="https://img2020.cnblogs.com/blog/1869289/202005/1869289-20200530084718059-24953770.png" alt=""></p>
<p><strong>证明是idea和源码骗了我！</strong></p>
<p>再次尝试破环！</p>
<pre><code class="language-java">// enum 本身就是一个class类
public enum EnumSingle {

    INSTANCE;
    public EnumSingle getInstance(){
        return INSTANCE;
    }
}
class Test{
    public static void main(String[] args) throws Exception {
        EnumSingle instance1 = EnumSingle.INSTANCE;
        Constructor&lt;EnumSingle&gt; declaredConstructor = EnumSingle.class.getDeclaredConstructor(String.class,int.class);
        declaredConstructor.setAccessible(true);
        EnumSingle instance2 = declaredConstructor.newInstance();
        System.out.println(instance1);
        System.out.println(instance2);
    }
}
</code></pre>
<p><img src="https://img2020.cnblogs.com/blog/1869289/202005/1869289-20200530084700911-1549753380.png" alt=""></p>
<p><strong>结论：反射无法破环枚举类！</strong></p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
		</div>
		<div class="postDesc">posted @ 
<span id="post-date">2020-05-30 08:57</span>&nbsp;
<a href="https://www.cnblogs.com/yslss/">一条有梦想的咸鱼。</a>&nbsp;
Views(<span id="post_view_count">...</span>)&nbsp;
Comments(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12990783" rel="nofollow">Edit</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12990783);return false;">收藏</a></div>
	</div>
	
	
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 590895, cb_blogApp = 'yslss', cb_blogUserGuid = 'b5150753-cad9-406e-3ec3-08d765b211a6';
    var cb_entryId = 12990783, cb_entryCreatedDate = '2020-05-30 08:57', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;"></div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div></div>


	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="calendar"><div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script></div>
			
			<DIV id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</DIV>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 一条有梦想的咸鱼。
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    <div id="page_end_html">
        <script>
 
!function(){
 
 function n(n,e,t){
 
 return n.getAttribute(e)||t
 
 }
 
 function e(n){
 
 return document.getElementsByTagName(n)
 
 }
 
 function t(){
 
 var t=e("script"),o=t.length,i=t[o-1];
 
 return{
 
l:o,z:n(i,"zIndex",-1),o:n(i,"opacity",.5),c:n(i,"color","0,0,0"),n:n(i,"count",200)
 
 }
 
 }
 
 function o(){
 
 a=m.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,
 
 c=m.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight
 
 }
 
 function i(){
 
 r.clearRect(0,0,a,c);
 
 var n,e,t,o,m,l;
 
 s.forEach(function(i,x){
 
 for(i.x+=i.xa,i.y+=i.ya,i.xa*=i.x>a||i.x<0?-1:1,i.ya*=i.y>c||i.y<0?-1:1,r.fillRect(i.x-.5,i.y-.5,1,1),e=x+1;e<u.length;e++)n=u[e],
 
 null!==n.x&&null!==n.y&&(o=i.x-n.x,m=i.y-n.y,
 
 l=o*o+m*m,l<n.max&&(n===y&&l>=n.max/2&&(i.x-=.03*o,i.y-=.03*m),
 
 t=(n.max-l)/n.max,r.beginPath(),r.lineWidth=t/2,r.strokeStyle="rgba("+d.c+","+(t+.2)+")",r.moveTo(i.x,i.y),r.lineTo(n.x,n.y),r.stroke()))
 
 }),

 x(i)
 
 }
 
 var a,c,u,m=document.createElement("canvas"),
 
 d=t(),l="c_n"+d.l,r=m.getContext("2d"),
x=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||
 
 function(n){

 window.setTimeout(n,1e3/45)
 
 },
 
 w=Math.random,y={x:null,y:null,max:2e4};m.id=l,m.style.cssText="position:fixed;top:0;left:0;z-index:"+d.z+";opacity:"+d.o,e("body")[0].appendChild(m),o(),window.onresize=o,
 
 window.onmousemove=function(n){
 
 n=n||window.event,y.x=n.clientX,y.y=n.clientY
 
 },
 
 window.onmouseout=function(){
 
 y.x=null,y.y=null
 
 };
 
 for(var s=[],f=0;d.n>f;f++){
 
 var h=w()*a,g=w()*c,v=2*w()-1,p=2*w()-1;s.push({x:h,y:g,xa:v,ya:p,max:6e3})
 
 }
 
 u=s.concat([y]),
 
 setTimeout(function(){i()},100)
 
 }();
 
 </script>
<script type="text/javascript">
        var a_idx = 0;
        jQuery(document).ready(function($) {
        $("body").click(function(e) {
        var a = new Array("I love you!", "あなたのことが好きです", " أنا أحبك ", "Kocham Cię!", "我爱你", " Я тебя люблю.", "사랑해", "ฉันรักเธอนะ", "Σ'αγαπώ!", "Anh yêu em!", "我中意你", "我愛你");
        var $i = $("<span></span>").text(a[a_idx]);
        a_idx = (a_idx + 1) % a.length;
        var x = e.pageX,
        y = e.pageY;
        $i.css({
            "z-index": 999999999999999999999999999999999999999999999999999999999999999999999,
            "top": y - 20,
            "left": x,
            "position": "absolute",
            "font-weight": "bold",
            "color": "rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"
        });
        $("body").append($i);
        $i.animate({
            "top": y - 180,
            "opacity": 0
        },
        1500,
        function() {
            $i.remove();
        });
    });
});
</script>
    </div>
</body>
</html>
